// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	aggregates "github.com/jcleira/coding-challenge/internal/domain/aggregates"

	mock "github.com/stretchr/testify/mock"
)

// SolanaGetter is an autogenerated mock type for the SolanaGetter type
type SolanaGetter struct {
	mock.Mock
}

// GetTransactions provides a mock function with given fields: ctx, publicKey
func (_m *SolanaGetter) GetTransactions(ctx context.Context, publicKey string) ([]aggregates.Transaction, error) {
	ret := _m.Called(ctx, publicKey)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []aggregates.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]aggregates.Transaction, error)); ok {
		return rf(ctx, publicKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []aggregates.Transaction); ok {
		r0 = rf(ctx, publicKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]aggregates.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, publicKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSolanaGetter creates a new instance of SolanaGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSolanaGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *SolanaGetter {
	mock := &SolanaGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
