// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	aggregates "github.com/jcleira/coding-challenge/internal/domain/aggregates"
	mock "github.com/stretchr/testify/mock"
)

// WalletGetter is an autogenerated mock type for the WalletGetter type
type WalletGetter struct {
	mock.Mock
}

// GetWallet provides a mock function with given fields: publicKey
func (_m *WalletGetter) GetWallet(publicKey string) (aggregates.Wallet, error) {
	ret := _m.Called(publicKey)

	if len(ret) == 0 {
		panic("no return value specified for GetWallet")
	}

	var r0 aggregates.Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (aggregates.Wallet, error)); ok {
		return rf(publicKey)
	}
	if rf, ok := ret.Get(0).(func(string) aggregates.Wallet); ok {
		r0 = rf(publicKey)
	} else {
		r0 = ret.Get(0).(aggregates.Wallet)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(publicKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWalletGetter creates a new instance of WalletGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletGetter {
	mock := &WalletGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
